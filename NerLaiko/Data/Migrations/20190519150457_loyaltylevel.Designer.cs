// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NerLaiko.Data;

namespace NerLaiko.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190519150457_loyaltylevel")]
    partial class loyaltylevel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NerLaiko.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("LoyaltyLevelId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyLevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NerLaiko.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Coefficient");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("NerLaiko.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("FridgeId");

                    b.Property<DateTime>("From");

                    b.Property<string>("HtmlContents");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("NerLaiko.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("FridgeId");

                    b.Property<string>("OperatorComment");

                    b.Property<string>("OperatorId");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.HasIndex("OperatorId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("NerLaiko.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryAmount");

                    b.Property<string>("Description");

                    b.Property<bool>("IsForSale");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("Unit");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("NerLaiko.Models.ItemDiscount", b =>
                {
                    b.Property<int>("ItemId");

                    b.Property<int>("DiscountId");

                    b.HasKey("ItemId", "DiscountId");

                    b.HasAlternateKey("DiscountId", "ItemId");

                    b.ToTable("ItemDiscounts");
                });

            modelBuilder.Entity("NerLaiko.Models.LoyaltyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Coefficient");

                    b.Property<int>("Years");

                    b.HasKey("Id");

                    b.ToTable("LoyaltyLevels");
                });

            modelBuilder.Entity("NerLaiko.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeliveryInterval");

                    b.Property<Guid>("FridgeId");

                    b.Property<bool>("IsReccuring");

                    b.Property<DateTime>("NextDeliveryDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NerLaiko.Models.OrderItem", b =>
                {
                    b.Property<int>("ItemId");

                    b.Property<Guid>("OrderId");

                    b.Property<int>("Quantity");

                    b.HasKey("ItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("NerLaiko.Models.Produce", b =>
                {
                    b.Property<int>("ItemId");

                    b.Property<Guid>("FridgeId");

                    b.Property<int>("DeliveredAmount");

                    b.Property<int>("Quantity");

                    b.HasKey("ItemId", "FridgeId");

                    b.HasAlternateKey("FridgeId", "ItemId");

                    b.ToTable("Produces");
                });

            modelBuilder.Entity("NerLaiko.Models.Refrigerator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<int>("State");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Refrigerators");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NerLaiko.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NerLaiko.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NerLaiko.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NerLaiko.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NerLaiko.Models.ApplicationUser", b =>
                {
                    b.HasOne("NerLaiko.Models.LoyaltyLevel", "LoyaltyLevel")
                        .WithMany("Users")
                        .HasForeignKey("LoyaltyLevelId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("NerLaiko.Models.Invoice", b =>
                {
                    b.HasOne("NerLaiko.Models.Refrigerator", "Fridge")
                        .WithMany("Invoices")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NerLaiko.Models.Issue", b =>
                {
                    b.HasOne("NerLaiko.Models.Refrigerator", "Fridge")
                        .WithMany("Issues")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NerLaiko.Models.ApplicationUser", "Operator")
                        .WithMany("AssignedIssues")
                        .HasForeignKey("OperatorId");
                });

            modelBuilder.Entity("NerLaiko.Models.ItemDiscount", b =>
                {
                    b.HasOne("NerLaiko.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NerLaiko.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NerLaiko.Models.Order", b =>
                {
                    b.HasOne("NerLaiko.Models.Refrigerator", "Fridge")
                        .WithMany("Orders")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NerLaiko.Models.OrderItem", b =>
                {
                    b.HasOne("NerLaiko.Models.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NerLaiko.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NerLaiko.Models.Produce", b =>
                {
                    b.HasOne("NerLaiko.Models.Refrigerator", "Fridge")
                        .WithMany("Products")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NerLaiko.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NerLaiko.Models.Refrigerator", b =>
                {
                    b.HasOne("NerLaiko.Models.ApplicationUser", "User")
                        .WithMany("Refrigerators")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
